class Matrix {
    private:
        size_t _m; // количество строк
        size_t _n; // количество столбцов
        double **a; // Матрица представляется в виде двумерного массива (просто а, потому что привычно элементы матрицы обозначать a(ij))

    public:
    /* Конуструктор матриц, считываемых из файла */
    Matrix (std::string name_of_file);
    /* Конструктор матриц размера m x n */
    Matrix (int m, int n); // В данном случае матрицы будут размера 1 x n (вектор-строки)
    ~Matrix(); // Десткруктор 

    /* Возвращают размеры матрицы */
    int get_m () const {return _m;}; 
    int get_n() const {return _n;};
    /* Возвращает значение элемента a[i][j] */
    double get_elem (int i, int j) const; 
    /* Устанавливает значение элемента a[i][j] */
    void set_elem (double x, int i, int j); 

    /* Выводит матрицу на экран */
    void print_matrix() const; 

    /* Приводит матрицу к ступенчатому виду методом Гаусса */
    void gauss (); 
    /* Вычисляет ранг ступенчатой матрицы */
    int rank () const; // Функция вычиляющая ступенчатой матрицы 
}; 

/** Вычисляет приближенное с точностью eps решение слау методом простой итерации
 **
 ** Входные параметры на матрицу:
 **     Достаточное условие сходимости метода: преобладаение диагональных элементов матрицы (модуль диагонального элмента превосходит
 **     сумму модулей остальных элементов строки без правой части)
 **
 ** Параметры:
 **     name_of_file: имя файла, из которого считывается матрица
 **
 ** Возвращаемое значение:
 **     В случае успеха функция возвращает приближенное значение вектор-решения слау
 **/
void iter (std::string name_of_file);